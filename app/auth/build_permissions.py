from app.database.models import Permissions
from app.database.database import get_db
from sqlalchemy.orm import Session
from fastapi import FastAPI

def check_permissions_to_build(app:FastAPI, db:Session) -> list[str]:
    
    permissions = db.query(Permissions).all()
    permission_names = [permission.name for permission in permissions]
    
    routes = app.routes[4:]
    tag_permissions_to_create = list({*[route.tags[0] for route in routes if route.tags[0] not in permission_names]})
    
    method_permissions = list({f'{route.tags[0].lower()}_{list(route.methods)[0].lower()}_method' for route in routes})
    method_permissions_to_create = [method for method in method_permissions if method not in permission_names]
    
    function_permissions_to_create = [route.name for route in routes if route.name not in permission_names]
    
    return tag_permissions_to_create + method_permissions_to_create + function_permissions_to_create
    

def build_permissions(app:FastAPI):
    db:Session = next(get_db())
    permissions_to_build:list[str] = check_permissions_to_build(app, db)
    instanciated_permissions = [Permissions(name=permission, state=True, description="Autogenerated permission") for permission in permissions_to_build]
    
    if len(instanciated_permissions) == 0:
        print('No permissions to build')
        db.close()
        return
    
    db.add_all(instanciated_permissions)
    db.commit()
    db.close()
    print(f'Finished building {len(permissions_to_build)} permissions')
    
    